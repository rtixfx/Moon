{
    "object": "list",
    "data": [
        {
            "object": "nest",
            "attributes": {
                "id": 1,
                "uuid": "496fd7e8-e69b-48a2-bc1e-39dbefdd6430",
                "author": "support@pterodactyl.io",
                "name": "Minecraft",
                "description": null,
                "created_at": "2024-04-02T14:13:53+00:00",
                "updated_at": "2024-04-05T21:18:57+00:00",
                "relationships": {
                    "eggs": {
                        "object": "list",
                        "data": [
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 1,
                                    "uuid": "4e9a0418-55af-410d-9450-b3bda290289d",
                                    "name": "Paper",
                                    "nest": 1,
                                    "author": "parker@pterodactyl.io",
                                    "description": "High performance Spigot fork that aims to fix gameplay and mechanics inconsistencies.",
                                    "docker_image": "ghcr.io/rikodev/pterodactyl-graalvm:17-EE",
                                    "docker_images": {
                                        "Java 17": "ghcr.io/rikodev/pterodactyl-graalvm:17-EE",
                                        "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                                        "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                                        "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
                                    },
                                    "config": {
                                        "files": {
                                            "server.properties": {
                                                "parser": "properties",
                                                "find": {
                                                    "server-ip": "0.0.0.0",
                                                    "server-port": "{{server.build.default.port}}",
                                                    "query.port": "{{server.build.default.port}}"
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": ")! For help, type "
                                        },
                                        "stop": "stop",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/ash\r\n# Paper Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=paper\r\n\r\nif [ -n \"${DL_PATH}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_PATH}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep -m1 true`\r\n\tLATEST_VERSION=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Specified version not found. Defaulting to the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\r\n\tBUILD_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep -m1 true`\r\n\tLATEST_BUILD=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https://raw.githubusercontent.com/parkervcp/eggs/master/minecraft/java/server.properties\r\nfi",
                                        "entry": "ash",
                                        "container": "ghcr.io/pterodactyl/installers:alpine",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:13:53+00:00",
                                    "updated_at": "2024-04-06T20:20:18+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 15,
                                    "uuid": "02ec923b-f37e-4894-aa8d-7bdff274d298",
                                    "name": "Velocity",
                                    "nest": 1,
                                    "author": "parker@parkervcp.com",
                                    "description": "Velocity is a Minecraft server proxy with unparalleled server support, scalability, and flexibility.",
                                    "docker_image": "ghcr.io/pterodactyl/yolks:java_21",
                                    "docker_images": {
                                        "Java 21": "ghcr.io/pterodactyl/yolks:java_21",
                                        "Java 17": "ghcr.io/pterodactyl/yolks:java_17",
                                        "Java 16": "ghcr.io/pterodactyl/yolks:java_16",
                                        "Java 11": "ghcr.io/pterodactyl/yolks:java_11",
                                        "Java 8": "ghcr.io/pterodactyl/yolks:java_8"
                                    },
                                    "config": {
                                        "files": {
                                            "velocity.toml": {
                                                "parser": "file",
                                                "find": {
                                                    "bind = ": "bind = \"0.0.0.0:{{server.build.default.port}}\""
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": "Done ("
                                        },
                                        "stop": "end",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar {{SERVER_JARFILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/ash\r\n# Velocity Proxy Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=velocity\r\n\r\nif [[ -z ${VELOCITY_VERSION} ]] || [[ ${VELOCITY_VERSION} == \"latest\" ]]; then\r\n    VELOCITY_VERSION=\"latest\"\r\nfi\r\n\r\nif [[ -n \"${DOWNLOAD_LINK}\" ]]; then\r\n    echo -e \"Using supplied download url: ${DOWNLOAD_LINK}\"\r\n    DOWNLOAD_URL=$(eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g'))\r\nelse\r\n    VER_EXISTS=$(curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r --arg VERSION $VELOCITY_VERSION '.versions[] | contains($VERSION)' | grep true)\r\n    LATEST_VERSION=$(curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]')\r\n\r\nif [[ \"${VER_EXISTS}\" == \"true\" ]]; then\r\n    echo -e \"Version is valid. Using version ${VELOCITY_VERSION}\"\r\nelse\r\n    echo -e \"Using the latest ${PROJECT} version\"\r\n    VELOCITY_VERSION=${LATEST_VERSION}\r\nfi\r\n\r\nBUILD_EXISTS=$(curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep true)\r\nLATEST_BUILD=$(curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION} | jq -r '.builds' | jq -r '.[-1]')\r\n\r\nif [[ \"${BUILD_EXISTS}\" == \"true\" ]]; then\r\n    echo -e \"Build is valid for version ${VELOCITY_VERSION}. Using build ${BUILD_NUMBER}\"\r\nelse\r\n    echo -e \"Using the latest ${PROJECT} build for version ${VELOCITY_VERSION}\"\r\n    BUILD_NUMBER=${LATEST_BUILD}\r\nfi\r\n\r\nJAR_NAME=${PROJECT}-${VELOCITY_VERSION}-${BUILD_NUMBER}.jar\r\necho \"Version being downloaded\"\r\necho -e \"Velocity Version: ${VELOCITY_VERSION}\"\r\necho -e \"Build: ${BUILD_NUMBER}\"\r\necho -e \"JAR Name of Build: ${JAR_NAME}\"\r\nDOWNLOAD_URL=https://papermc.io/api/v2/projects/${PROJECT}/versions/${VELOCITY_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\n\r\nfi\r\ncd /mnt/server\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [[ -f ${SERVER_JARFILE} ]]; then\r\nmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [[ -f velocity.toml ]]; then\r\n    echo -e \"velocity config file exists\"\r\nelse\r\n    echo -e \"downloading velocity config file.\"\r\n    curl https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/velocity/velocity.toml -o velocity.toml\r\nfi\r\n\r\nif [[ -f forwarding.secret ]]; then\r\n    echo -e \"velocity forwarding secret file already exists\"\r\nelse\r\n    echo -e \"creating forwarding secret file\"\r\n    touch forwarding.secret\r\n    date +%s | sha256sum | base64 | head -c 12 > forwarding.secret\r\nfi\r\n\r\necho -e \"install complete\"",
                                        "entry": "ash",
                                        "container": "ghcr.io/pterodactyl/installers:alpine",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:30:33+00:00",
                                    "updated_at": "2024-04-02T14:30:33+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 16,
                                    "uuid": "64489ba9-ba7d-4222-84a7-84a02ecee658",
                                    "name": "Waterfall",
                                    "nest": 1,
                                    "author": "hostmaster@waterfallgaming.net",
                                    "description": "Waterfall is a fork of the well-known BungeeCord server teleportation suite.",
                                    "docker_image": "ghcr.io/pterodactyl/yolks:java_17",
                                    "docker_images": {
                                        "ghcr.io/pterodactyl/yolks:java_17": "ghcr.io/pterodactyl/yolks:java_17",
                                        "ghcr.io/pterodactyl/yolks:java_16": "ghcr.io/pterodactyl/yolks:java_16",
                                        "ghcr.io/pterodactyl/yolks:java_11": "ghcr.io/pterodactyl/yolks:java_11",
                                        "ghcr.io/pterodactyl/yolks:java_8": "ghcr.io/pterodactyl/yolks:java_8"
                                    },
                                    "config": {
                                        "files": {
                                            "config.yml": {
                                                "parser": "yaml",
                                                "find": {
                                                    "listeners[0].host": "0.0.0.0:{{server.build.default.port}}",
                                                    "servers.*.address": {
                                                        "127.0.0.1": "{{config.docker.interface}}",
                                                        "localhost": "{{config.docker.interface}}"
                                                    }
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": "Listening on "
                                        },
                                        "stop": "end",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# Waterfall Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=waterfall\r\n\r\napt update\r\napt install -y curl jq\r\n\r\nif [ -n \"${DL_LINK}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_LINK}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_LINK} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep true`\r\n\tLATEST_VERSION=`curl -s https://papermc.io/api/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\t\r\n\tBUILD_EXISTS=`curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep true`\r\n\tLATEST_BUILD=`curl -s https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\t\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\t\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\t\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://papermc.io/api/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f config.yml ]; then\r\n\techo -e \"Downloading ${PROJECT} config.yml\"\r\n\tcurl -o config.yml https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/minecraft/proxy/java/waterfall/config.yml\r\nelse\r\n\techo -e \"${PROJECT} config.yml exists. Will not pull a new file\"\r\nfi",
                                        "entry": "bash",
                                        "container": "debian:buster-slim",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:30:43+00:00",
                                    "updated_at": "2024-04-02T14:30:43+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 27,
                                    "uuid": "43b0694d-e480-47f3-a5ab-13c0766e3a53",
                                    "name": "Paper Anti Miner Fix",
                                    "nest": 1,
                                    "author": "parker@pterodactyl.io",
                                    "description": "High performance Spigot fork that aims to fix gameplay and mechanics inconsistencies.",
                                    "docker_image": "ghcr.io/misalibaytb/pterodactylmultiegg:java_17",
                                    "docker_images": {
                                        "Java 17": "ghcr.io/misalibaytb/pterodactylmultiegg:java_17"
                                    },
                                    "config": {
                                        "files": {
                                            "server.properties": {
                                                "parser": "properties",
                                                "find": {
                                                    "server-ip": "0.0.0.0",
                                                    "server-port": "{{server.build.default.port}}",
                                                    "query.port": "{{server.build.default.port}}"
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": ")! For help, type "
                                        },
                                        "stop": "stop",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "java -Xms128M -Xmx{{SERVER_MEMORY}}M -Dterminal.jline=false -Dterminal.ansi=true -jar {{SERVER_JARFILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/ash\r\n# Paper Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nPROJECT=paper\r\n\r\nif [ -n \"${DL_PATH}\" ]; then\r\n\techo -e \"Using supplied download url: ${DL_PATH}\"\r\n\tDOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's/{{/${/g' -e 's/}}/}/g')`\r\nelse\r\n\tVER_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep -m1 true`\r\n\tLATEST_VERSION=`curl -s https://api.papermc.io/v2/projects/${PROJECT} | jq -r '.versions' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n\telse\r\n\t\techo -e \"Specified version not found. Defaulting to the latest ${PROJECT} version\"\r\n\t\tMINECRAFT_VERSION=${LATEST_VERSION}\r\n\tfi\r\n\r\n\tBUILD_EXISTS=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep -m1 true`\r\n\tLATEST_BUILD=`curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION} | jq -r '.builds' | jq -r '.[-1]'`\r\n\r\n\tif [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n\t\techo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n\telse\r\n\t\techo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n\t\tBUILD_NUMBER=${LATEST_BUILD}\r\n\tfi\r\n\r\n\tJAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n\r\n\techo \"Version being downloaded\"\r\n\techo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n\techo -e \"Build: ${BUILD_NUMBER}\"\r\n\techo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n\tDOWNLOAD_URL=https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${BUILD_NUMBER}/downloads/${JAR_NAME}\r\nfi\r\n\r\ncd /mnt/server\r\n\r\necho -e \"Running curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\"\r\n\r\nif [ -f ${SERVER_JARFILE} ]; then\r\n\tmv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\nfi\r\n\r\ncurl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\nif [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https://raw.githubusercontent.com/parkervcp/eggs/master/minecraft/java/server.properties\r\nfi",
                                        "entry": "ash",
                                        "container": "ghcr.io/pterodactyl/installers:alpine",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-05T21:18:21+00:00",
                                    "updated_at": "2024-04-20T12:37:01+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 32,
                                    "uuid": "500bfbde-ff65-408b-9ba3-138a0598dfe1",
                                    "name": "node.js generic",
                                    "nest": 1,
                                    "author": "parker@parkervcp.com",
                                    "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
                                    "docker_image": "ghcr.io/parkervcp/yolks:nodejs_20",
                                    "docker_images": {
                                        "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
                                        "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
                                        "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
                                        "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
                                        "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
                                        "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
                                        "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": [
                                                "change this text 1",
                                                "change this text 2"
                                            ]
                                        },
                                        "stop": "^^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest -g\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
                                        "entry": "bash",
                                        "container": "node:18-bullseye-slim",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-20T12:11:50+00:00",
                                    "updated_at": "2024-04-20T12:11:50+00:00"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "object": "nest",
            "attributes": {
                "id": 5,
                "uuid": "591f75e9-c474-49fc-b7ab-0bb327f93812",
                "author": "domin211.211.211@gmail.com",
                "name": "Stuff",
                "description": null,
                "created_at": "2024-04-02T14:30:53+00:00",
                "updated_at": "2024-04-02T14:30:53+00:00",
                "relationships": {
                    "eggs": {
                        "object": "list",
                        "data": [
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 19,
                                    "uuid": "c4578c7a-e2e5-4f9c-af7f-3bb37bc1a0f8",
                                    "name": "Uptime Kuma",
                                    "nest": 5,
                                    "author": "eggs@goover.dev",
                                    "description": "Uptime Kuma is an easy-to-use self-hosted monitoring tool.",
                                    "docker_image": "ghcr.io/parkervcp/apps:uptimekuma",
                                    "docker_images": {
                                        "ghcr.io/parkervcp/apps:uptimekuma": "ghcr.io/parkervcp/apps:uptimekuma"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": "[SERVER] INFO: Listening on "
                                        },
                                        "stop": "^^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then npm run setup; fi; /usr/local/bin/node /home/container/server/server.js --port={{SERVER_PORT}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/ash\r\n# Uptime Kuma App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napk update\r\napk add --no-cache git curl jq file unzip make gcc g++ python3 python3-dev libtool\r\napk add --no-cache git-lfs --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/community\r\n\r\n## npm update to latest\r\necho -e \"Updating npm to latest....\\n\"\r\nif [ -d \"/mnt/server/node_modules\" ]; then\r\n    rm -fR /mnt/server/node_modules\r\n    npm cache verify\r\nfi\r\nnpm install -g npm@latest\r\n\r\n## Uptime Kuma install & update\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\ngit config --global --add safe.directory /mnt/server\r\n\r\nif [ -d .git ]; then\r\n    echo -e \"Updating Uptime Kuma....\\n \"\r\n    npm run setup\r\nelse\r\n    echo -e \"Download and installing Uptime Kuma...\\n\"   \r\n    git clone https://github.com/louislam/uptime-kuma.git .\r\n    npm run setup\r\nfi\r\n\r\n## only create dir, when .git is present to prevent errors\r\nif [ -d .git ]; then\r\n    mkdir -p /mnt/server/data\r\nfi\r\n\r\nif [ ! -f \"/mnt/server/data/kuma.db\" ]; then\r\n    cp /mnt/server/db/kuma.db /mnt/server/data/kuma.db\r\nfi\r\n\r\n## install end\r\necho -e \"-----------------------------------------\"\r\necho -e \"Installation completed...\"\r\necho -e \"-----------------------------------------\"\r\nexit 0",
                                        "entry": "ash",
                                        "container": "node:18-alpine",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:32:05+00:00",
                                    "updated_at": "2024-04-02T14:32:05+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 20,
                                    "uuid": "d71d9c71-6ed7-4a9e-a82b-d5fc04f0a856",
                                    "name": "MariaDB 10.3",
                                    "nest": 5,
                                    "author": "parker@parkervcp.com",
                                    "description": "One of the most popular database servers. Made by the original developers of MySQL. Guaranteed to stay open source.",
                                    "docker_image": "ghcr.io/parkervcp/yolks:mariadb_10.3",
                                    "docker_images": {
                                        "MariaDB 10.3": "ghcr.io/parkervcp/yolks:mariadb_10.3"
                                    },
                                    "config": {
                                        "files": {
                                            ".my.cnf": {
                                                "parser": "file",
                                                "find": {
                                                    "port": "port = {{server.build.default.port}}",
                                                    "bind-address": "bind-address=0.0.0.0"
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": "mysqld: ready for connections"
                                        },
                                        "stop": "shutdown; exit;",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "{ /usr/sbin/mysqld & } && sleep 5 && mysql -u root",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# MariaDB Installation Script\r\n#\r\n# Server Files: /mnt/server\r\nset -x\r\n\r\necho -e \"installing dependencies\"\r\napt-get -y update\r\napt-get -y install curl\r\n\r\n## add user\r\necho -e \"adding container user\"\r\nuseradd -d /home/container -m container -s /bin/bash\r\n\r\n## own server to container user\r\nchown container: /mnt/server/\r\n\r\n## run install script as user\r\necho -e \"getting my.conf\"\r\nif [ -f /mnt/server/.my.cnf ]; then\r\n    echo -e \"moving current config for install\"\r\n    mv /mnt/server/.my.cnf /mnt/server/custom.my.cnf\r\n    runuser -l container -c 'curl https://raw.githubusercontent.com/parkervcp/eggs/master/database/sql/mariadb/install.my.cnf > /mnt/server/.my.cnf'\r\nelse\r\n    runuser -l container -c 'curl https://raw.githubusercontent.com/parkervcp/eggs/master/database/sql/mariadb/install.my.cnf > /mnt/server/.my.cnf'\r\nfi\r\n\r\n## mkdir and install db\r\necho -e \"installing mysql database\"\r\nrunuser -l container -c 'mkdir -p /mnt/server/run/mysqld'\r\nrunuser -l container -c 'mkdir -p /mnt/server/log/mysql'\r\nrunuser -l container -c 'mkdir /mnt/server/mysql'\r\n\r\nrunuser -l container -c 'mysql_install_db --defaults-file=/mnt/server/.my.cnf'\r\n\r\nif [ -f /mnt/server/custom.my.cnf ]; then\r\n    echo -e \"moving current config back in place\"\r\n    mv /mnt/server/custom.my.cnf /mnt/server/.my.cnf\r\nelse\r\n    curl https://raw.githubusercontent.com/parkervcp/eggs/master/database/sql/mariadb/my.cnf > /mnt/server/.my.cnf\r\nfi\r\n\r\necho -e \"install complete\"\r\n\r\nexit",
                                        "entry": "bash",
                                        "container": "mariadb:10.3",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:32:26+00:00",
                                    "updated_at": "2024-04-02T14:32:26+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 21,
                                    "uuid": "618bbf3d-adfd-4739-9160-4b0231bca5ad",
                                    "name": "node.js generic",
                                    "nest": 5,
                                    "author": "parker@parkervcp.com",
                                    "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
                                    "docker_image": "ghcr.io/parkervcp/yolks:nodejs_20",
                                    "docker_images": {
                                        "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
                                        "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
                                        "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
                                        "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
                                        "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
                                        "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
                                        "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": [
                                                "a"
                                            ]
                                        },
                                        "stop": "^^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils chromium libnss3-dev gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libgbm-dev gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libatk-bridge2.0-0 libnss3-dev gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libgbm-dev libxkbcommon-x11-0 libgbm-dev libgtk-3-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2\r\n\r\nwget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\r\napt-get install -y ./google-chrome-stable_current_amd64.deb\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest -g\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
                                        "entry": "bash",
                                        "container": "node:18-bullseye-slim",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:34:34+00:00",
                                    "updated_at": "2024-04-17T18:51:53+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 22,
                                    "uuid": "e4cd1c89-b6f5-4f55-8ed5-cc972ac3c577",
                                    "name": "nodemon",
                                    "nest": 5,
                                    "author": "nick@blackforthosting.com",
                                    "description": "Nodemon javascript egg that automatically restarts the node application when file changes in the directory are detected\r\n\r\nThis will clone a git repo for a bot. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload, then I assume you know what you are doing.",
                                    "docker_image": "ghcr.io/parkervcp/yolks:nodejs_16",
                                    "docker_images": {
                                        "ghcr.io/parkervcp/yolks:nodejs_16": "ghcr.io/parkervcp/yolks:nodejs_16",
                                        "ghcr.io/parkervcp/yolks:nodejs_15": "ghcr.io/parkervcp/yolks:nodejs_15",
                                        "ghcr.io/parkervcp/yolks:nodejs_14": "ghcr.io/parkervcp/yolks:nodejs_14",
                                        "ghcr.io/parkervcp/yolks:nodejs_12": "ghcr.io/parkervcp/yolks:nodejs_12"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": "change this text"
                                        },
                                        "stop": "^c",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "npm install nodemon; if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install --production; fi; /home/container/node_modules/nodemon/bin/nodemon.js /home/container/{{BOT_JS_FILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# NodeJS Bot Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js bot repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
                                        "entry": "bash",
                                        "container": "node:14-buster-slim",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:34:51+00:00",
                                    "updated_at": "2024-04-02T14:34:51+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 23,
                                    "uuid": "ae87670d-c37b-45ce-ba2a-6c7183c6493b",
                                    "name": "python generic",
                                    "nest": 5,
                                    "author": "parker@parkervcp.com",
                                    "description": "A Generic Python Egg for Pterodactyl\r\n\r\nTested with: https://github.com/Ispira/pixel-bot",
                                    "docker_image": "ghcr.io/parkervcp/yolks:python_3.12",
                                    "docker_images": {
                                        "Python 3.12": "ghcr.io/parkervcp/yolks:python_3.12",
                                        "Python 3.11": "ghcr.io/parkervcp/yolks:python_3.11",
                                        "Python 3.10": "ghcr.io/parkervcp/yolks:python_3.10",
                                        "Python 3.9": "ghcr.io/parkervcp/yolks:python_3.9",
                                        "Python 3.8": "ghcr.io/parkervcp/yolks:python_3.8",
                                        "Python 3.7": "ghcr.io/parkervcp/yolks:python_3.7",
                                        "Python 2.7": "ghcr.io/parkervcp/yolks:python_2.7"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": "change this part"
                                        },
                                        "stop": "^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "if [[ -d .git ]] && [[ \"{{AUTO_UPDATE}}\" == \"1\" ]]; then git pull; fi; if [[ ! -z \"{{PY_PACKAGES}}\" ]]; then pip install -U --prefix .local {{PY_PACKAGES}}; fi; if [[ -f /home/container/${REQUIREMENTS_FILE} ]]; then pip install -U --prefix .local -r ${REQUIREMENTS_FILE}; fi; /usr/local/bin/python /home/container/{{PY_FILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# Python App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git python repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\nexport HOME=/mnt/server\r\n\r\necho \"Installing python requirements into folder\"\r\nif [[ ! -z ${PY_PACKAGES} ]]; then\r\n    pip install -U --prefix .local ${PY_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/requirements.txt ]; then\r\n    pip install -U --prefix .local -r ${REQUIREMENTS_FILE}\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
                                        "entry": "bash",
                                        "container": "python:3.8-slim-bullseye",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-02T14:35:07+00:00",
                                    "updated_at": "2024-04-02T14:35:07+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 25,
                                    "uuid": "4d5ea61e-bfcb-4f4c-8135-5dd4eb9b2211",
                                    "name": "KlovitClient Egg",
                                    "nest": 5,
                                    "author": "dark@zexade.com",
                                    "description": "A KlovitClient Egg, maintained by darknight81",
                                    "docker_image": "quay.io/klovit/klovitclient-egg",
                                    "docker_images": {
                                        "KlovitClient-Egg": "quay.io/klovit/klovitclient-egg"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": "[KlovitClient] Your KlovitClient instance is now listening on port"
                                        },
                                        "stop": "^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "./entrypoint.sh",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\necho \"Hello\"",
                                        "entry": "bash",
                                        "container": "node:16",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-04T13:46:07+00:00",
                                    "updated_at": "2024-04-04T13:46:07+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 26,
                                    "uuid": "e24c69c3-d1b0-4353-8eea-679c8cb35185",
                                    "name": "NodeJS Puppeteer Egg",
                                    "nest": 5,
                                    "author": "anon@anondev.ml",
                                    "description": "With this egg you can run project with puppeteer on pterodactyl.\r\nIt uses NodeJS v14 docker image with extra dependencies that are needed for puppeteer.\r\n\r\nThis will clone a git repo for a bot. it defaults to master if no branch is specified.\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
                                    "docker_image": "ghcr.io/goover/yolks:nodejs_14pptr",
                                    "docker_images": {
                                        "ghcr.io/goover/yolks:nodejs_14pptr": "ghcr.io/goover/yolks:nodejs_14pptr"
                                    },
                                    "config": {
                                        "files": {},
                                        "startup": {
                                            "done": [
                                                "start",
                                                "ready",
                                                "Ready",
                                                "Logged",
                                                "connected",
                                                "Started",
                                                "online",
                                                "Connected",
                                                "running",
                                                "loaded"
                                            ]
                                        },
                                        "stop": "^^C",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/node /home/container/{{BOT_JS_FILE}}",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# NodeJS Bot Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js bot repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"Install complete\"\r\nexit 0",
                                        "entry": "bash",
                                        "container": "node:14-buster-slim",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-05T20:38:26+00:00",
                                    "updated_at": "2024-04-05T20:38:26+00:00"
                                }
                            },
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 31,
                                    "uuid": "ee5005b5-8a95-4144-9a1a-3db92a9030d7",
                                    "name": "VPS - Egg",
                                    "nest": 5,
                                    "author": "mrnitro2017@gmail.com",
                                    "description": "Run a VPS in pterodactyl!",
                                    "docker_image": "quay.io/ydrag0n/pterodactyl-vps-egg",
                                    "docker_images": {
                                        "quay.io/ydrag0n/pterodactyl-vps-egg": "quay.io/ydrag0n/pterodactyl-vps-egg"
                                    },
                                    "config": {
                                        "files": {
                                            "vps.config": {
                                                "parser": "properties",
                                                "find": {
                                                    "internalip": "0.0.0.0",
                                                    "port": "{{server.build.default.port}}"
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": ")! Welcome ",
                                            "userInteraction": [
                                                "Go to eula.txt for more info."
                                            ]
                                        },
                                        "stop": "exit",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "bash install.sh",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n\r\ncd /mnt/server/",
                                        "entry": "bash",
                                        "container": "quay.io/ydrag0n/pterodactyl-vps-egg",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-19T09:09:46+00:00",
                                    "updated_at": "2024-04-19T09:09:46+00:00"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "object": "nest",
            "attributes": {
                "id": 6,
                "uuid": "32d1aebc-cddb-4a84-87f5-e56b7790c8ce",
                "author": "domin211.211.211@gmail.com",
                "name": "FiveM",
                "description": null,
                "created_at": "2024-04-03T15:24:39+00:00",
                "updated_at": "2024-04-03T15:24:39+00:00",
                "relationships": {
                    "eggs": {
                        "object": "list",
                        "data": [
                            {
                                "object": "egg",
                                "attributes": {
                                    "id": 24,
                                    "uuid": "14316550-968a-44c5-853f-4387a73f9e00",
                                    "name": "FiveM",
                                    "nest": 6,
                                    "author": "parker@parkervcp.com",
                                    "description": "A new FiveM egg for the latest builds due to recent changes in FiveM",
                                    "docker_image": "ghcr.io/parkervcp/yolks:debian",
                                    "docker_images": {
                                        "ghcr.io/parkervcp/yolks:debian": "ghcr.io/parkervcp/yolks:debian"
                                    },
                                    "config": {
                                        "files": {
                                            "server.cfg": {
                                                "parser": "file",
                                                "find": {
                                                    "endpoint_add_tcp": "endpoint_add_tcp \"0.0.0.0:{{server.build.default.port}}\"",
                                                    "endpoint_add_udp": "endpoint_add_udp \"0.0.0.0:{{server.build.default.port}}\"",
                                                    "sv_hostname": "sv_hostname \"{{server.build.env.SERVER_HOSTNAME}}\"",
                                                    "set sv_licenseKey": "set sv_licenseKey {{server.build.env.FIVEM_LICENSE}}",
                                                    "set steam_webApiKey": "set steam_webApiKey {{server.build.env.STEAM_WEBAPIKEY}}",
                                                    "sv_maxclients": "sv_maxclients {{server.build.env.MAX_PLAYERS}}"
                                                }
                                            }
                                        },
                                        "startup": {
                                            "done": "succeeded. Welcome!"
                                        },
                                        "stop": "quit",
                                        "logs": [],
                                        "file_denylist": [],
                                        "extends": null
                                    },
                                    "startup": "$(pwd)/alpine/opt/cfx-server/ld-musl-x86_64.so.1 --library-path \"$(pwd)/alpine/usr/lib/v8/:$(pwd)/alpine/lib/:$(pwd)/alpine/usr/lib/\" -- $(pwd)/alpine/opt/cfx-server/FXServer +set citizen_dir $(pwd)/alpine/opt/cfx-server/citizen/ +set sv_licenseKey {{FIVEM_LICENSE}} +set steam_webApiKey {{STEAM_WEBAPIKEY}} +set sv_maxplayers {{MAX_PLAYERS}} +set serverProfile default +set txAdminPort {{TXADMIN_PORT}} $( [ \"$TXADMIN_ENABLE\" == \"1\" ] || printf %s '+exec server.cfg' )",
                                    "script": {
                                        "privileged": true,
                                        "install": "#!/bin/bash\r\n# FiveM Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update -y\r\napt install -y tar xz-utils file jq\r\n\r\nmkdir -p /mnt/server/resources\r\n\r\ncd /mnt/server\r\n\r\necho \"updating citizenfx resource files\"\r\ngit clone https://github.com/citizenfx/cfx-server-data.git /tmp\r\ncp -Rf /tmp/resources/* resources/\r\n\r\nRELEASE_PAGE=$(curl -sSL https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/)\r\nCHANGELOGS_PAGE=$(curl -sSL https://changelogs-live.fivem.net/api/changelog/versions/linux/server)\r\n\r\nif [[ \"${FIVEM_VERSION}\" == \"recommended\" ]] || [[ -z ${FIVEM_VERSION} ]]; then\r\n  DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.recommended_download')\r\nelif [[ \"${FIVEM_VERSION}\" == \"latest\" ]]; then\r\n  DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.latest_download')\r\nelse\r\n  VERSION_LINK=$(echo -e \"${RELEASE_PAGE}\" | grep -Eo '\".*/*.tar.xz\"' | grep -Eo '\".*/*.tar.xz\"' | sed 's/\\\"//g'  | sed 's/\\.\\///1' | grep -i \"${FIVEM_VERSION}\" | grep -o =.* |  tr -d '=')\r\n  if [[ \"${VERSION_LINK}\" == \"\" ]]; then\r\n    echo -e \"defaulting to recommedned as the version requested was invalid.\"\r\n    DOWNLOAD_LINK=$(echo $CHANGELOGS_PAGE | jq -r '.recommended_download')\r\n  else\r\n    DOWNLOAD_LINK=$(echo https://runtime.fivem.net/artifacts/fivem/build_proot_linux/master/${VERSION_LINK})\r\n  fi\r\nfi\r\n\r\nif [ ! -z \"${DOWNLOAD_URL}\" ]; then\r\n  if curl --output /dev/null --silent --head --fail ${DOWNLOAD_URL}; then\r\n    echo -e \"link is valid. setting download link to ${DOWNLOAD_URL}\"\r\n    DOWNLOAD_LINK=${DOWNLOAD_URL}\r\n  else\r\n    echo -e \"link is invalid closing out\"\r\n    exit 2\r\n  fi\r\nfi\r\n\r\necho -e \"Running curl -sSL ${DOWNLOAD_LINK} -o ${DOWNLOAD_LINK##*/}\"\r\n\r\ncurl -sSL ${DOWNLOAD_LINK} -o ${DOWNLOAD_LINK##*/}\r\n\r\necho \"Extracting fivem files\"\r\n\r\nFILETYPE=$(file -F ',' ${DOWNLOAD_LINK##*/} | cut -d',' -f2 | cut -d' ' -f2)\r\nif [ \"$FILETYPE\" == \"gzip\" ]; then\r\n  tar xzvf ${DOWNLOAD_LINK##*/}\r\nelif [ \"$FILETYPE\" == \"Zip\" ]; then\r\n  unzip ${DOWNLOAD_LINK##*/}\r\nelif [ \"$FILETYPE\" == \"XZ\" ]; then\r\n  tar xvf ${DOWNLOAD_LINK##*/}\r\nelse\r\n  echo -e \"unknown filetype. Exiting\"\r\n  exit 2\r\nfi\r\n\r\nrm -rf ${DOWNLOAD_LINK##*/} run.sh\r\n\r\nif [ -e server.cfg ]; then\r\n  echo \"Skipping downloading default server config file as one already exists\"\r\nelse\r\n  echo \"Downloading default fivem config\"\r\n  curl https://raw.githubusercontent.com/parkervcp/eggs/master/game_eggs/gta/fivem/server.cfg >>server.cfg\r\nfi\r\n\r\nmkdir -p logs/\r\n\r\necho \"install complete\"",
                                        "entry": "bash",
                                        "container": "ghcr.io/parkervcp/installers:debian",
                                        "extends": null
                                    },
                                    "created_at": "2024-04-03T15:25:03+00:00",
                                    "updated_at": "2024-04-03T15:25:03+00:00"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "meta": {
        "pagination": {
            "total": 3,
            "count": 3,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {}
        }
    }
}